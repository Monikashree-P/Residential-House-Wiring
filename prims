#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

// Define the structure for a graph node
typedef struct Node {
    int node;
    int weight;
    struct Node* next;
} Node;

// Define the structure for a graph
typedef struct Graph {
    int numNodes;
    Node** adjLists;
} Graph;

// Function to create a new graph node
Node* createNode(int node, int weight) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->node = node;
    newNode->weight = weight;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with numNodes vertices
Graph* createGraph(int numNodes) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numNodes = numNodes;
    graph->adjLists = (Node**)malloc(numNodes * sizeof(Node*));
    for (int i = 0; i < numNodes; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int node1, int node2, int weight) {
    Node* newNode1 = createNode(node2, weight);
    newNode1->next = graph->adjLists[node1];
    graph->adjLists[node1] = newNode1;
    
    Node* newNode2 = createNode(node1, weight);
    newNode2->next = graph->adjLists[node2];
    graph->adjLists[node2] = newNode2;
}

// Function to print the graph
void printGraph(Graph* graph) {
    for (int i = 0; i < graph->numNodes; i++) {
        Node* temp = graph->adjLists[i];
        printf("Node %d: ", i);
        while (temp) {
            printf("%d (%d) ", temp->node, temp->weight);
            temp = temp->next;
        }
        printf("\n");
    }
}

// Function to find the vertex with the minimum key value that is not yet included in MST
int minKey(int key[], bool mstSet[], int numNodes) {
    int min = INT_MAX, minIndex;
    for (int v = 0; v < numNodes; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to print the constructed MST stored in parent[]
void printMST(int parent[], int numNodes, Graph* graph) {
    printf("Minimum Spanning Tree:\n");
    for (int i = 1; i < numNodes; i++) {
        Node* temp = graph->adjLists[i];
        while (temp) {
            if (temp->node == parent[i]) {
                printf("Node %d -- Node %d (%d)\n", parent[i], i, temp->weight);
                break;
            }
            temp = temp->next;
        }
    }
}

// Function to run Prim's algorithm
void primMST(Graph* graph) {
    int numNodes = graph->numNodes;
    int parent[numNodes];  // Array to store constructed MST
    int key[numNodes];     // Key values used to pick minimum weight edge in cut
    bool mstSet[numNodes]; // To represent set of vertices not yet included in MST

    // Initialize all keys as INFINITE
    for (int i = 0; i < numNodes; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;      // Make key 0 so that this vertex is picked as first vertex
    parent[0] = -1;  // First node is always root of MST

    // The MST will have numNodes vertices
    for (int count = 0; count < numNodes - 1; count++) {
        int u = minKey(key, mstSet, numNodes);  // Pick the minimum key vertex
        mstSet[u] = true;  // Add the picked vertex to the MST Set

        Node* temp = graph->adjLists[u];
        while (temp) {
            int v = temp->node;
            if (!mstSet[v] && temp->weight < key[v]) {
                parent[v] = u;
                key[v] = temp->weight;
            }
            temp = temp->next;
        }
    }

    printMST(parent, numNodes, graph);
}

// Driver code
int main() {
    int numNodes = 5;
    Graph* graph = createGraph(numNodes);

    addEdge(graph, 0, 1, 2);
    addEdge(graph, 0, 2, 3);
    addEdge(graph, 1, 2, 1);
    addEdge(graph, 1, 3, 4);
    addEdge(graph, 2, 3, 2);
    addEdge(graph, 2, 4, 5);
    addEdge(graph, 4, 3, 1);

    printf("Original Graph:\n");
    printGraph(graph);

    printf("\nMinimum Spanning Tree:\n");
    primMST(graph);

    // Free allocated memory
    for (int i = 0; i < numNodes; i++) {
        Node* temp = graph->adjLists[i];
        while (temp) {
            Node* next = temp->next;
            free(temp);
            temp = next;
        }
    }
    free(graph->adjLists);
    free(graph);

    return 0;
}
